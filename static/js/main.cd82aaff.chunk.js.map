{"version":3,"sources":["components/Social.js","components/Whitelist.js","images/swim-logo.png","images/signature.png","App.js","index.js"],"names":["Social","className","href","target","rel","Whitelist","account","networkID","form","useRef","useState","networkMessage","setNetworkMessage","cursor","disabled","setDisabled","btnText","setBtnText","city","setCity","country","setCountry","countryCode","setCountryCode","ipAddress","setIpAddress","btnColor","setBtnColor","textColor","setTextColor","current","Date","geolocation_key","process","REACT_APP_KEY","useEffect","fetch","then","response","json","data","country_name","country_code","IPv4","Form","method","ref","id","onSubmit","e","preventDefault","header","body","FormData","document","getElementById","console","log","catch","error","message","reset","Group","Control","type","value","hidden","name","required","readonly","placeholder","sitekey","onChange","Button","style","backgroundColor","color","App","setAccount","shortAcct","setShortAccount","setNetworkID","web3","Web3","givenProvider","a","eth","requestAccounts","accounts","String","substring","net","getId","loadAccounts","loadNetwork","changeInChainListener","window","ethereum","on","location","reload","src","SwimLogo","alt","Signature","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cd82aaff.chunk.js","sourcesContent":["import React from 'react'\nimport { FaInstagram, FaTwitter, FaSpotify } from 'react-icons/fa'\n\nconst Social = () => {\n  return (\n    <div className='social'>\n      <div className=\"socialBtns\">\n        <a href='https://www.marcebassy.com/about' target=\"_blank\" rel=\"noreferrer noopener\">\n          <span className=\"spin\">ABOUT</span>\n        </a>\n        <a  href= '/' target=\"_blank\" rel=\"noreferrer noopener\">\n          <span className=\"spin\">ROADMAP</span>\n        </a>\n        <a href='https://discord.gg/hUmjvUDF' target=\"_blank\" rel=\"noreferrer noopener\">\n          <span className=\"spin\">DISCORD</span>\n        </a>\n      </div>\n      <div className=\"socialIcons\">\n        <a href='https://www.instagram.com/marcebassy/?hl=en' target=\"_blank\" rel=\"noreferrer noopener\">\n         <FaInstagram className=\"icon\"/>\n        </a>\n        <a  href= 'https://twitter.com/marcebassy' target=\"_blank\" rel=\"noreferrer noopener\">\n          <FaTwitter className=\"icon\"/>\n        </a>\n        <a href='https://open.spotify.com/artist/3tQx1LPXbsYjE9VwN1Peaa?autoplay=true&v=A' target=\"_blank\" rel=\"noreferrer noopener\">\n          <FaSpotify className=\"icon\"/>\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default Social","import React, { useState, useEffect, useRef } from 'react'\nimport { Form, Button } from 'react-bootstrap'\nimport ReCAPTCHA from \"react-google-recaptcha\";\n\nconst Whitelist = ({account, networkID}) => {\n    const form = useRef()\n\n    const [networkMessage, setNetworkMessage] = useState();\n    const [cursor, ] = useState(\"no-drop\")\n    const [disabled, setDisabled] = useState(true)\n    const [btnText, setBtnText] = useState(\"WHITELIST COMING SOON\")\n    const [city, setCity]=useState(\"\")\n    const [country, setCountry]=useState(\"\")\n    const [countryCode, setCountryCode]=useState(\"\")\n    const [ipAddress, setIpAddress]=useState(\"\")\n    const [btnColor, setBtnColor]=useState(\"lightgrey\")\n    const [textColor, setTextColor]=useState(\"#000\")\n\n    const current = new Date()\n \n    const url = process.env.REACT_APP_WHITELIST\n    const geolocation_key = process.env.REACT_APP_KEY\n    const recaptcha_key = process.env.REACT_APP_RECAPTCHA\n\n    useEffect(() => {\n      const getLocation = () => {\n      fetch(\"https://geolocation-db.com/json/\" + geolocation_key)\n      .then( response => response.json() )\n      .then( data => {\n        setCity(data.city)\n        setCountry(data.country_name)\n        setCountryCode(data.country_code)\n        setIpAddress(data.IPv4)\n      })\n     }\n      getLocation()\n    }, [geolocation_key])\n\n    function onChange(value) {\n      setDisabled(false)\n      console.log(\"Captcha value:\", value);\n      if (value === null) {\n        setDisabled(true)\n      }\n      }\n\n    useEffect(() => {\n        if(networkID === 1 ) {\n          setNetworkMessage(\"Enter your information below to get on the Whitelist\")\n        } \n        if(networkID === 5777) {\n          setNetworkMessage(`You are connected to your localhost network.  Log in to the Etherium Mainnet to access the Whitelist.`)\n        } \n        if(networkID === 3 ) {\n          setNetworkMessage(\"You are connected to the Ropsten Test Network.  Log in to the Etherium Mainnet to access the Whitelist.\")\n        } \n        if(networkID === 42 ) {\n          setNetworkMessage(\"You are connected to the Kovan Test Network.  Log in to the Etherium Mainnet to access the Whitelist.\")\n        } \n        if(networkID === 4 ) {\n          setNetworkMessage(`You are connected to the Rinkeby Test Network. Log in to the Etherium Mainnet to access the Whitelist.`)\n        } \n        if(networkID === 5 ) {\n          setNetworkMessage(\"You are connected to the Goerli Test Network.  Log in to the Etherium Mainnet to access the Whitelist.\")\n        } \n        if(networkID === 1666600000 ) {\n          setNetworkMessage(\"You are connected to the Harmony One Network.  Log in to the Etherium Mainnet to access the Whitelist.\")\n        } \n        if(networkID === \"undefined\" ) {\n          setNetworkMessage(\"Log in to the Etherium Mainnet to access the Whitelist.\")\n        } \n      }, [networkID]);\n\n\n    const joinWhitelist = (e) => {\n      e.preventDefault();\n      // window.grecaptcha.reset();\n      setBtnText(\"Sending...\")\n      setDisabled(true)\n      setBtnColor(\"lightgrey\")\n      setTextColor(\"#000\")\n      fetch(url, {\n        header: 'Access-Control-Allow-Origin',\n        method: \"POST\",\n        body: new FormData(document.getElementById(\"join-whitelist\"))\n      })\n        .then((response) => {\n          setBtnText(\"Submission Sent\");\n          return response.json();\n        })\n        .then((data) => {\n          console.log(data, \"DATA\")\n        })\n          .catch(error => {\n            console.error(error.message, \"ERROR.MESSAGE\")\n          }\n      )\n        form.current.reset();\n      }\n\n  return (\n    <div className='whitelist'>\n        { !account ? (\n            <div className=\"message\">Sign in to your wallet to get access to the PreSale Whitelist</div>\n          ) : account ? (\n            <div>\n            <div className='message'>{ networkMessage }</div>\n            { account && networkID === 1 ? (\n              <Form method=\"POST\" ref={form} id='join-whitelist' className=\"form\" onSubmit={joinWhitelist}>\n                <Form.Group className=\"fGroup\">\n                <Form.Control type=\"text\" value={current} hidden name=\"TimeStamp\" required readonly />\n                <Form.Control type=\"text\" name='Name' placeholder=\"NAME >>> John Smith\" required />\n                <Form.Control type=\"email\" name='Email' placeholder=\"EMAIL >>> johnsmith@gmail.com\" required />\n                <Form.Control type=\"text\" name='Discord' placeholder=\"DISCORD >>> johnny#0357\" required />\n                <Form.Control type=\"text\" name='Wallet_Address' className=\"account\" value={`${account}`} required readonly />\n                <Form.Control type=\"text\" value={city} hidden name=\"City\" required readonly />\n                <Form.Control type=\"text\" value={country} hidden name=\"Country\" required readonly />\n                <Form.Control type=\"text\" value={countryCode} hidden name=\"Country_Code\" required readonly />\n                <Form.Control type=\"text\" value={ipAddress} hidden name=\"IP_Address\" required readonly />\n                </Form.Group>\n                <Form.Group className=\"endForm\">\n                <ReCAPTCHA\n                  sitekey={recaptcha_key}\n                  onChange={onChange}\n                  />\n                <Button\n                  className=\"submitBtn\" \n                  type='submit' \n                  value='send'\n                  disabled={disabled} \n                  style={{\n                    cursor: `${cursor}`, \n                    backgroundColor: `${btnColor}`,\n                    color: `${textColor}`\n                    }}\n                    >\n                    {btnText}\n                </Button>\n                </Form.Group>\n              </Form>\n            ) : (null)}\n            </div>\n          ) : (null)}\n    </div>\n  )\n}\n\nexport default Whitelist","export default __webpack_public_path__ + \"static/media/swim-logo.3f31c13f.png\";","export default __webpack_public_path__ + \"static/media/signature.211bae14.png\";","/* eslint-disable */\n\nimport { useState, useEffect } from 'react'\nimport Web3 from 'web3'\nimport './App.css'\nimport Social from './components/Social'\nimport Whitelist from './components/Whitelist'\nimport SwimLogo from './images/swim-logo.png'\nimport Signature from './images/signature.png'\n\n\nfunction App() {\n\n  const [account, setAccount] = useState()\n  const [shortAcct, setShortAccount] = useState()\n  const [networkID, setNetworkID] = useState()\n\n\n  const web3 = new Web3(Web3.givenProvider || 'http://localhost:7545')\n\n  async function loadAccounts() {\n  \n    const accounts = await web3.eth.requestAccounts();\n    setAccount(String(accounts[0]))\n  \n    setShortAccount(String(accounts[0].substring(0,3) + \"...\" + accounts[0].substring(38)))\n  }\n\n  async function loadNetwork() {\n\n    const networkID = await web3.eth.net.getId()\n    setNetworkID(networkID)\n  \n  }\n  \n  useEffect(() => {\n     loadAccounts()\n     loadNetwork()\n  }, [])\n\n  useEffect(()=> {\n    const changeInChainListener = async () => {\n\n    await window.ethereum.on('accountsChanged', function(account) {\n      setAccount(account);\n      window.location.reload();\n    })\n\n    await window.ethereum.on('networkChanged', function (networkID) {\n      setNetworkID(networkID)\n      window.location.reload();\n    })\n  }\n\n  changeInChainListener()\n\n  }, [account, networkID])\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={SwimLogo} alt=\"Swim Logo\" className=\"swimLogo\"/>\n        <img src={Signature} alt=\"Bassy's Signature\" className=\"bassyLogo\"/>\n        <Whitelist account={account} networkID={networkID} shortAcct={shortAcct}/>\n        <Social />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n"],"sourceRoot":""}